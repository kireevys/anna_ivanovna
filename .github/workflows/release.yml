name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout репозитория
        uses: actions/checkout@v4

      - name: Извлечение версии из тега
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Версия из тега: $VERSION"

      - name: Получение версии из Cargo.toml
        id: cargo_version
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "cargo_version=$CARGO_VERSION" >> $GITHUB_OUTPUT
          echo "Версия в Cargo.toml: $CARGO_VERSION"

      - name: Проверка соответствия версий
        run: |
          if [ "${{ steps.get_version.outputs.version }}" != "${{ steps.cargo_version.outputs.cargo_version }}" ]; then
            echo "❌ Версии не совпадают!"
            echo "Версия из тега: ${{ steps.get_version.outputs.version }}"
            echo "Версия в Cargo.toml: ${{ steps.cargo_version.outputs.cargo_version }}"
            echo ""
            echo "Для исправления:"
            echo "1. Обновите версию в Cargo.toml до ${{ steps.get_version.outputs.version }}"
            echo "2. Или создайте тег с версией ${{ steps.cargo_version.outputs.cargo_version }}"
            exit 1
          else
            echo "✅ Версии совпадают!"
          fi

  test:
    runs-on: ubuntu-latest
    needs: validate-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Run Tests
        run: cargo test
      - name: clippy
        run: cargo clippy --all-targets --all-features -- -W clippy::style -D clippy::perf -D warnings

  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_name: anna_ivanovna-x86_64-unknown-linux-gnu.tar.gz
            binary_name: anna_ivanovna

          - os: macos-latest
            target: x86_64-apple-darwin
            archive_name: anna_ivanovna-x86_64-apple-darwin.tar.gz
            binary_name: anna_ivanovna

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_name: anna_ivanovna-x86_64-pc-windows-msvc.zip
            binary_name: anna_ivanovna.exe

          - os: macos-latest
            target: aarch64-apple-darwin
            archive_name: anna_ivanovna-aarch64-apple-darwin.tar.gz
            binary_name: anna_ivanovna

    runs-on: ${{ matrix.os }}
    needs: validate-version

    steps:
      - name: Checkout репозитория
        uses: actions/checkout@v4

      - name: Установка Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Сборка
        run: cargo build --release --target ${{ matrix.target }}

      - name: Создание архива
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows - создаем ZIP архив
            pwsh -Command "& {
              \$src = 'target/${{ matrix.target }}/release/${{ matrix.binary_name }}';
              \$dst = 'dist/${{ matrix.archive_name }}';
              Compress-Archive -Path \$src -DestinationPath \$dst
            }"
          else
            # macOS/Linux - создаем tar.gz архив
            cd target/${{ matrix.target }}/release
            tar -czf ../../../dist/${{ matrix.archive_name }} ${{ matrix.binary_name }}
            cd ../../../
          fi
        shell: bash

      - name: Загрузка артефактов
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: dist/${{ matrix.archive_name }}

  release:
    environment: release-approval
    needs: [ build, test ]
    runs-on: ubuntu-latest

    steps:
      - name: Скачать артефакты
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Создать GitHub релиз
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
