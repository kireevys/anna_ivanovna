use crate::distribute::{Income, distribute};
use crate::finance::Money;
use crate::planning::{IncomeSource, Plan};
use crate::storage::plan_from_yaml;
use chrono::Local;
use clap::{Parser, Subcommand};
use rust_decimal::Decimal;
use std::fs::File;
use std::io::Write;
use std::path::Path;
use std::{fs, io};

const PLAN: &str = "plan.yaml";
const STORAGE: &str = "storage";
const INCOMES: &str = "incomes";
const DEFAULT_HOME: &str = ".buh";
const ENV_BUH_HOME: &str = "BUH_HOME";

#[derive(Debug)]
pub enum Error {
    NoConfig,
    NoPlan,
    CantWriteResult,
    InvalidInput,
    CantPrepareStorage,
}

#[derive(Parser)]
#[clap(
    name = "Anna Ivanovna",
    version = env!("CARGO_PKG_VERSION"),
    author = "github.com/kireevys",
    about = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—é–¥–∂–µ—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ —Å—Ç–∞—Ç—å—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤",
    long_about = "Anna Ivanovna –ø–æ–º–æ–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã –ø–æ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É –±—é–¥–∂–µ—Ç–∞.

–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑, –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞.

–ü—Ä–∏–º–µ—Ä—ã:
  anna_ivanovna prepare-storage    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
  anna_ivanovna plan               # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
  anna_ivanovna income 50000       # –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ 50000‚ÇΩ"
)]
struct Cli {
    /// –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏
    #[clap(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É
    #[clap(alias = "income")]
    AddIncome {
        /// –°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö
        amount: Decimal,
    },

    /// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞
    #[clap(alias = "show-plan")]
    Plan,

    /// –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    #[clap(alias = "prepare")]
    PrepareStorage,

    /// –í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    #[clap(alias = "readme")]
    Manual,
}

fn user_input() -> Result<usize, Error> {
    let mut source_num = String::new();
    io::stdout().flush().unwrap();
    io::stdin()
        .read_line(&mut source_num)
        .map_err(|_| Error::InvalidInput)?;
    source_num
        .trim()
        .parse::<usize>()
        .map_err(|_| Error::InvalidInput)
}

fn choose_source(plan: &Plan) -> Result<&IncomeSource, Error> {
    if plan.sources.len() == 1 {
        return plan.sources.first().ok_or(Error::NoPlan);
    }
    println!("–í –ë—é–¥–∂–µ—Ç–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞:");
    for (n, i) in plan.sources.iter().enumerate() {
        println!("{n} : {i}");
    }
    print!("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ $ ");
    let input = user_input()?;
    plan.sources.get(input).ok_or(Error::InvalidInput)
}

fn process_income(plan: &Plan, amount: Decimal, incomes_path: &Path) -> Result<(), Error> {
    let source = choose_source(plan)?;
    let income = Income::new_today(source.clone(), Money::new_rub(amount));

    match distribute(plan, &income) {
        Ok(d) => {
            let result_path =
                incomes_path.join(format!("{}.json", Local::now().format("%Y-%m-%d"),));
            let mut file = File::create(&result_path).map_err(|_| Error::CantWriteResult)?;

            let json_result =
                serde_json::to_string_pretty(&d).map_err(|_| Error::CantWriteResult)?;
            file.write_all(json_result.as_bytes())
                .map_err(|_| Error::CantWriteResult)?;

            println!("–ó–∞–ø–∏—Å–∞–Ω–æ –≤ {result_path:?}");
            println!("{d}");
        }
        Err(e) => println!("{e:?}"),
    }
    Ok(())
}

fn get_buh_home() -> Result<std::path::PathBuf, Error> {
    if let Ok(val) = std::env::var(ENV_BUH_HOME) {
        println!(
            "üè† [anna_ivanovna] –ò—Å–ø–æ–ª—å–∑—É—é BUH_HOME –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {}",
            val
        );
        Ok(std::path::PathBuf::from(val))
    } else {
        let default = dirs::home_dir()
            .map(|h| h.join(DEFAULT_HOME))
            .ok_or(Error::NoConfig)?;
        println!(
            "üè† [anna_ivanovna] BUH_HOME –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {}",
            default.display()
        );
        Ok(default)
    }
}

pub fn auto_prepare_storage() -> Result<(), String> {
    let buh_dir = std::env::var(ENV_BUH_HOME)
        .map(std::path::PathBuf::from)
        .or_else(|_| {
            dirs::home_dir()
                .map(|h| h.join(DEFAULT_HOME))
                .ok_or("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é".to_string())
        })?;

    println!(
        "üì¶ [anna_ivanovna] –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é: {}",
        buh_dir.display()
    );

    if buh_dir.exists() {
        return Err(format!(
            "‚ùóÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {}",
            buh_dir.display()
        ));
    }

    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    fs::create_dir_all(&buh_dir).map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}"))?;
    println!(
        "üìÅ [anna_ivanovna] –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}",
        buh_dir.display()
    );

    // –í—ã–∑—ã–≤–∞–µ–º prepare-–ª–æ–≥–∏–∫—É (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤)
    let storage = buh_dir.join("storage");
    let incomes_path = storage.join("incomes");
    let plan_p = storage.join("plan.yaml");

    fs::create_dir_all(&incomes_path).map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è incomes: {e}"))?;
    println!(
        "üìÅ [anna_ivanovna] –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}",
        incomes_path.display()
    );
    if !plan_p.exists() {
        // –ö–æ–ø–∏—Ä—É–µ–º example/plan.yaml, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        let example_plan = std::path::Path::new("example/plan.yaml");
        if example_plan.exists() {
            fs::copy(example_plan, &plan_p)
                .map_err(|e| format!("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è example/plan.yaml: {e}"))?;
            println!(
                "üìÑ [anna_ivanovna] –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–º–µ—Ä –ø–ª–∞–Ω–∞: {} ‚Üí {}",
                example_plan.display(),
                plan_p.display()
            );
            println!(
                "‚úèÔ∏è  [anna_ivanovna] –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–æ–¥ —Å–µ–±—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!"
            );
        } else {
            fs::write(&plan_p, "").map_err(|e| format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è plan.yaml: {e}"))?;
            println!(
                "üìÑ [anna_ivanovna] –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –ø–ª–∞–Ω–∞: {}",
                plan_p.display()
            );
            println!(
                "‚úèÔ∏è  [anna_ivanovna] –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!"
            );
        }
    }

    println!(
        "‚úÖ [anna_ivanovna] –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {}",
        buh_dir.display()
    );
    Ok(())
}

/// –ó–∞–ø—É—Å–∫ cli –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–æ–º
///
/// # Arguments
///
/// * `plan`: –°—Å—ã–ª–∫–∞ –Ω–∞ –ë—é–¥–∂–µ—Ç
///
/// # Errors
/// –ü—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –≤–≤–æ–¥–µ
///
/// returns: ()
pub fn run() -> Result<(), Error> {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    let buh_home = get_buh_home()?;
    if !buh_home.exists() {
        if let Err(e) = auto_prepare_storage() {
            eprintln!("{e}");
            std::process::exit(1);
        }
    }

    let cli = Cli::parse();
    let home = buh_home;
    let storage = home.join(STORAGE);
    storage.try_exists().map_err(|_| Error::NoPlan)?;
    let incomes_path = storage.join(INCOMES);
    let plan_p = storage.join(PLAN);
    plan_p.as_path().try_exists().map_err(|_| Error::NoPlan)?;

    let plan = plan_from_yaml(plan_p.as_path()).map_err(|_| Error::NoPlan)?;

    match cli.command {
        Commands::AddIncome { amount } => {
            println!(
                "[anna_ivanovna] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –ø–ª–∞–Ω–∞: {}",
                plan_p.display()
            );
            process_income(&plan, amount, &incomes_path)?;
        }
        Commands::Plan => {
            println!("{plan}");
        }
        Commands::PrepareStorage => {
            if incomes_path.exists() {
                println!(
                    "[anna_ivanovna] –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {}",
                    incomes_path.display()
                );
            } else {
                fs::create_dir_all(incomes_path.clone()).map_err(|e| {
                    eprintln!("{e}");
                    Error::CantPrepareStorage
                })?;
                println!(
                    "[anna_ivanovna] –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}",
                    incomes_path.display()
                );
            };

            if plan_p.exists() {
                println!(
                    "[anna_ivanovna] –§–∞–π–ª –ø–ª–∞–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}",
                    plan_p.display()
                );
            } else {
                fs::write(plan_p.clone(), "").map_err(|e| {
                    eprintln!("{e}");
                    Error::CantPrepareStorage
                })?;
                println!("[anna_ivanovna] –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ø–ª–∞–Ω–∞: {}", plan_p.display());
            }
        }
        Commands::Manual => {
            println!(
                "Anna Ivanovna - CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            );
        }
    }
    Ok(())
}
