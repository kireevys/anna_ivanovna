use crate::api::{distribute_budget, get_plan, save_budget};
use crate::core::distribute::Income;
use crate::core::finance::Money;
use crate::core::planning::{IncomeSource, Plan};
use crate::storage::FileSystem;
use crate::tui::run_tui;
use clap::{Parser, Subcommand};
use rust_decimal::Decimal;
use std::io;
use std::io::Write;
use std::path::PathBuf;
use tracing::info;

const STORAGE: &str = "storage";
const DEFAULT_HOME: &str = ".buh";
const ENV_BUH_HOME: &str = "BUH_HOME";

#[derive(Debug)]
pub enum Error {
    NoConfig,
    NoPlan,
    CantWriteResult,
    InvalidInput,
    CantPrepareStorage,
    CantDistribute,
}

#[derive(Parser)]
#[clap(
    name = "Anna Ivanovna",
    version = env!("CARGO_PKG_VERSION"),
    author = "github.com/kireevys",
    about = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—é–¥–∂–µ—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –ø–æ —Å—Ç–∞—Ç—å—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤",
    long_about = "Anna Ivanovna –ø–æ–º–æ–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã –ø–æ –∑–∞—Ä–∞–Ω–µ–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É –±—é–¥–∂–µ—Ç–∞.

–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑, –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞.

–ü—Ä–∏–º–µ—Ä—ã:
  anna_ivanovna prepare-storage    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
  anna_ivanovna plan               # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
  anna_ivanovna income 50000       # –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ 50000‚ÇΩ"
)]
struct Cli {
    /// –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏
    #[clap(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É
    #[clap(alias = "income")]
    AddIncome {
        /// –°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Ä—É–±–ª—è—Ö
        amount: Decimal,
    },

    /// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞
    Plan,

    /// –ü–æ–∫–∞–∑–∞—Ç—å –±—é–¥–∂–µ—Ç –ø–æ id
    #[clap(alias = "show")]
    ShowBudget {
        /// id –±—é–¥–∂–µ—Ç–∞
        id: String,
    },

    /// –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    #[clap(alias = "prepare")]
    PrepareStorage { path: PathBuf },

    /// –í—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    #[clap(alias = "readme")]
    Manual,

    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å TUI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    Tui,
}

fn user_input() -> Result<usize, Error> {
    let mut source_num = String::new();
    io::stdout().flush().unwrap();
    io::stdin()
        .read_line(&mut source_num)
        .map_err(|_| Error::InvalidInput)?;
    source_num
        .trim()
        .parse::<usize>()
        .map_err(|_| Error::InvalidInput)
}

fn choose_source(plan: &Plan) -> Result<&IncomeSource, Error> {
    if plan.sources.len() == 1 {
        return plan.sources.first().ok_or(Error::NoPlan);
    }
    println!("–í –ë—é–¥–∂–µ—Ç–µ —É–∫–∞–∑–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞:");
    for (n, i) in plan.sources.iter().enumerate() {
        println!("{n} : {i}");
    }
    print!("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ $ ");
    let input = user_input()?;
    plan.sources.get(input).ok_or(Error::InvalidInput)
}

fn get_buh_home() -> Result<std::path::PathBuf, Error> {
    if let Ok(val) = std::env::var(ENV_BUH_HOME) {
        println!("üè† [anna_ivanovna] –ò—Å–ø–æ–ª—å–∑—É—é BUH_HOME –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: {val}");
        Ok(std::path::PathBuf::from(val))
    } else {
        let default = dirs::home_dir()
            .map(|h| h.join(DEFAULT_HOME))
            .ok_or(Error::NoConfig)?;
        println!(
            "üè† [anna_ivanovna] BUH_HOME –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {}",
            default.display()
        );
        Ok(default)
    }
}

/// –ó–∞–ø—É—Å–∫ cli –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–æ–º
///
/// # Arguments
///
/// * `plan`: –°—Å—ã–ª–∫–∞ –Ω–∞ –ë—é–¥–∂–µ—Ç
///
/// # Errors
/// –ü—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –≤–≤–æ–¥–µ
///
/// returns: ()
pub fn run() -> Result<(), Error> {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    let buh_home = get_buh_home()?;
    let fs_repo = match FileSystem::init(buh_home.join(STORAGE)) {
        Ok(fs) => {
            info!(fs=?fs);
            fs
        }
        Err(e) => {
            eprintln!("{e}");
            std::process::exit(1);
        }
    };

    let cli = Cli::parse();
    let plan = get_plan(&fs_repo).ok_or(Error::NoPlan)?;
    let start = std::time::Instant::now();
    match cli.command {
        Commands::AddIncome { amount } => {
            let source = choose_source(&plan)?;
            let income = Income::new_today(source.clone(), Money::new_rub(amount));
            let budget = distribute_budget(&plan, &income).map_err(|_| Error::CantDistribute)?;

            println!("{budget}");
            let id = save_budget(budget, &fs_repo).map_err(|_| Error::CantWriteResult)?;

            println!("üíæ {id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
        }
        Commands::Plan => {
            println!("{plan}");
        }
        Commands::ShowBudget { id } => match crate::api::budget_by_id(&fs_repo, &id) {
            Some(budget) => println!("{budget}"),
            None => eprintln!("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –±—é–¥–∂–µ—Ç —Å id {id}"),
        },
        Commands::PrepareStorage { path } => {
            if let Err(e) = FileSystem::init(path) {
                eprintln!("{e}");
            }
        }
        Commands::Manual => {
            println!(
                "Anna Ivanovna - CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            );
        }
        Commands::Tui => {
            if let Err(e) = run_tui(&fs_repo) {
                eprintln!("–û—à–∏–±–∫–∞ TUI: {e}");
            }
            let elapsed = start.elapsed();
            println!("‚è±Ô∏è –í—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞: {elapsed:.2?}");
            return Ok(());
        }
    }
    let elapsed = start.elapsed();
    println!("‚è±Ô∏è –í—ã–ø–æ–ª–µ–Ω–µ–Ω–æ –∑–∞: {elapsed:.2?}");
    Ok(())
}
